const express = require('express');
const path = require('path');
const db = require('./config/db');

const app = express();
const port = process.env.PORT || 3000; // Usa a porta 3000 ou uma variÃ¡vel de ambiente.

// Middleware para processar requisiÃ§Ãµes
app.use(express.json()); // Habilita o uso de JSON no corpo das requisiÃ§Ãµes
app.use(express.urlencoded({ extended: true})); // Habilita o uso de dados de formulÃ¡rio
app.use(express.static(path.join(__dirname, '../public'))); // Serve arquivos estÃ¡ticos da pasta 'public'

// CenÃ¡rio sem pool de conexÃµes:
// Em um jogo, para cada aÃ§Ã£o, como cortar uma Ã¡rvore, vocÃª precisaria criar um novo lenhador. ApÃ³s a tarefa, ele desapareceria. 
// Isso seria uma tremenda perda de tempo e recursos.
// CenÃ¡rio com pool de conexÃµes:
// Com o pool, vocÃª treina um grupo de lenhadores (as conexÃµes) no inÃ­cio do jogo. Quando precisa cortar uma Ã¡rvore, vocÃª designa um desses lenhadores. Quando ele termina,
//  ele volta para a base, pronto para a prÃ³xima missÃ£o. Essa eficiÃªncia permite que o jogo flua sem atrasos, mesmo com muitas tarefas acontecendo ao mesmo tempo.

// Obter o pool de conexÃµes do banco de dados
const pool = db();

// Importa e conecta as rotas do CRUD
require('./pessoa/create')(app, pool);
require('./pessoa/read')(app, pool);
require('./pessoa/update')(app, pool);
require('./pessoa/delete')(app, pool);

// Iniciar o servidor e escutar a porta definida.
app.listen(port, () => {
    console.log(`ðŸš€ Servidor rodando em http://localhost:${port}`);
});