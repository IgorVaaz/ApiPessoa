/**
 * Script respons√°vel por buscar e exibir a lista de pessoas na tela.
 * A fun√ß√£o 'fetchPeople' √© chamada no in√≠cio para carregar os dados.
 */

// Aguarda o carregamento completo do conte√∫do da p√°gina (HTML)
document.addEventListener('DOMContentLoaded', () => {

    // Seleciona o elemento UL que vai conter a lista de pessoas
    const personList = document.getElementById('person-list');

    /**
     * Busca todas as pessoas da API e exibe os resultados na tela.
     */
    async function fetchPeople(){
        // Limpa a lista atual para evitar duplica√ß√£o
        personList.innerHTML = '';

        try{
            // fetch √© usado para fazer requisi√ß√µes HTTP (enviar e receber dados de servidor)
            // Faz uma requisi√ß√£o HTTP GET para o endpoint /api/pessoas
            const response = await fetch('/api/pessoas');

            // Verifica se a resposta n√£o foi bem sucedida (status diferente de 200)
            if(!response.ok){
                throw new Error('Erro ao carregar a lista de pessoas.');
            }

            // Converte o corpo da resposta (em JSON) para objeto JavaScript
            const people = await response.json();

            // Itera sobre a lista de pessoas e cria um item de lista cada uma.
            // Percorre o array de pessoas retornado pela API
            people.forEach(person => {
                // Cria um novo elemento de lista <li> para cada pessoa
                const li = document.createElement('li');

                //Define o conte√∫do HTML do <li> com os dados da pessoa
                // Usa operador tern√°rio (condi√ß√£o ? valor1 : valor2) para tratar campos ausentes
                li.innerHTML = `<span>${person.nome} ${person.sobrenome}, ${person.idade ? person.idade + ' anos' : 'Idade n√£o informada'},
                Sexo: ${person.sexo || 'N√£o informado'} - ${person.cidade || 'Cidade n√£o informada'}/${person.estado || ''}, ${person.pais
                || 'Pais n√£o informado'}</span>
                <div>
                    <button class="edit-btn" data-id="${person.id}"> Editar </button>
                    <button class="delete-btn" data-id="${person.id}"> Deletar </button>
                </div>`;
                // Adiciona o <li> rec√©m criado dentro da lista principal
                personList.appendChild(li);
            });
        } catch (error) {
            // Caso ocorra algum erro durante o fetch ou processamento de dados
            console.error("Falha ao buscar pessoas: ", error);
            // Exibe uma mensagem de erro vis√≠vel para o usu√°rio
            personList.innerHTML = `<p style="color: red;"> N√£o foi poss√≠vel carregar a lista de pessoas. Tente novamente
            mais tarde. </p>`;
        }


    }

    // Torna a fun√ß√£o global para que os outros scripts possam cham√°-la
    window.fetchPeople = fetchPeople;

    // Executa a fun√ß√£o automaticamente ao carregar a p√°gina
    fetchPeople();

});

/* 
--------------------------------------------------------------
üìò EXPLICA√á√ÉO DO C√ìDIGO (RESUMO PARA ESTUDO)
--------------------------------------------------------------

1Ô∏è‚É£ O script s√≥ √© executado depois que todo o HTML da p√°gina √© carregado.
   ‚Üí Isso √© feito com: document.addEventListener('DOMContentLoaded', ...)

2Ô∏è‚É£ Em seguida, ele procura na p√°gina o elemento com id="person-list".
   ‚Üí √â dentro desse elemento que ser√° exibida a lista de pessoas.

3Ô∏è‚É£ A fun√ß√£o fetchPeople() √© uma fun√ß√£o ass√≠ncrona (usa 'async/await').
   ‚Üí Ela serve para buscar os dados de pessoas do servidor (API) e mostrar na tela.

4Ô∏è‚É£ Dentro da fun√ß√£o:
   - Primeiro, o conte√∫do atual da lista √© apagado (para evitar duplica√ß√£o).
   - Depois, √© feita uma requisi√ß√£o HTTP usando 'fetch("/api/pessoas")'.
     O 'fetch' pede ao servidor os dados das pessoas.
   - Quando a resposta chega, ela √© convertida de JSON para um objeto JavaScript "people"
       const people = await response.json();

5Ô∏è‚É£ O c√≥digo ent√£o percorre cada pessoa retornada com 'forEach'.
   ‚Üí Para cada pessoa, ele cria um elemento <li> (item de lista)
     com as informa√ß√µes: nome, sobrenome, idade, sexo, cidade, etc.
   ‚Üí Tamb√©m cria dois bot√µes:
       - "Editar" (para editar os dados futuramente)
       - "Deletar" (para excluir a pessoa futuramente)
   ‚Üí Cada <li> √© colocado dentro da lista principal (personList).

6Ô∏è‚É£ Caso ocorra algum erro durante a requisi√ß√£o (ex: servidor fora do ar),
   o c√≥digo mostra uma mensagem de erro na tela e tamb√©m registra o erro no console.

7Ô∏è‚É£ Por fim:
   - A fun√ß√£o 'fetchPeople' √© tornada global (window.fetchPeople),
     para poder ser usada em outros arquivos JS se necess√°rio.
   - A fun√ß√£o √© chamada automaticamente ao carregar a p√°gina,
     assim os dados aparecem logo que o site √© aberto.

--------------------------------------------------------------
üí° Em resumo:
Este script faz uma requisi√ß√£o √† API '/api/pessoas',
pega os dados do banco e mostra tudo na tela de forma autom√°tica.
--------------------------------------------------------------
*/
